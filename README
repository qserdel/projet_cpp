Projet C++ ROB4 de Manon SILVA et Quentin SERDEL
Manuel d'utilisation du jeu Space Fighter Mega Legends

###Compilation et execution###

Pour compiler le projet, lancez la commande "make" dans le terminal.
Pour lancer le jeu, lancez la commande "make play" dans le terminal.
Dans la fenêtre SFML ouverte, cliquez sur "play" puis cliquez sur la map sur laquelle vous souhaitez jouer.
Pour lancer les tests unitaires, lancez la commande "make tests" dans le terminal.

###Principe du jeu###

Space Fighter Mega Legends est un jeu de combat d'arcade en 2D jouable en 1v1 sur le même clavier.
Chaque joueur contrôle l'un des 2 robots présents sur l'écran.
Le robot bleu se déplace avec les touches directionnelles et tire avec la barre espace.
Le robot rouge se déplace avec les touches ZQSD et tire avec la touche E.
Le but est de réduire les PVs de l'adversaire à 0.

Des objets collectables tombent aléatoirement sur la map, chacun a son propre effet :
Clé anglaise : rend 3 PVs ;
Bouclier : rend invulnérable pendant une durée déterminée ;
Fourmi : rétrécis le robot pendant une durée déterminée ;
Baleine : agrandi le robot pendant une durée déterminée.

Lorsque le robot est touché, il reste paralysé pendant quelques secondes.

###Biliothèques et outils utilisés###

Les bibliothèques standards utilisées pour le projet sont : cstdlib, iolib, cmath, vector et ctime.
La bibliothèque graphique utilisée est SFML.
Les images ont été partiellement trouvées sur Internet (sprites de base du robot, fond des maps) et traitées à l'aide de Gimp.
Certaines images ont été dessinées sur Gimp (collectables, tirs, menus).

###Concernant le code###

Les points positifs :
Nous sommes satisfaits du résultat final. La physique du jeu est fluide et cohérente, le gameplay est assez dynamique et plaisant, le jeu est assez beau à nos yeux et a tout de même pas mal de contenu. Il est, comme spécifié dans le cahier des charges, possible d'y implémenter une IA facilement en modifiant la fonction "detect_Choix" dans la classe IA qui permet de prendre les décisions quant aux mouvements et actions des robots (cette fonction est héritée de la classe abstraite Joueur dont hérite les classes IA et Humain, et nous faisons appel à la notion de polymorphisme pour l'utiliser).

Éléments notables concernant l'organisation :
Le projet contient une classe abstraite : la classe Collectable dont hérite les classes Bouclier, Reparer, Grandir, Rapetisser. La fonction "action()" de la classe Collectable fait appel au polymorphisme. La boucle de fonctionnement général du jeu se trouve dans le fichier jeu.cpp.
La classe Collision gère toutes les interactions entre les objets du jeu. La classe Map contient tous les objets indépendants des joueurs (plateformes et collectables). La classe Robot comprend tout ce qui concerne l'état des robots et toutes les actions de ce dernier dont les décisions sont prises dans les classes Humain(détection d'évènements clavier) ou IA selon le type de joueur.
Nous avons également implémenté une méthode statique dans la classe Bouclier afin de créer un cercle.
Le main est très peu fourni, le jeu est facilement portable.

Ce qui ne marche pas bien :
L'utilisation de valgrind nous a posé quelques problèmes, nous ne sommes donc pas sûres que la gestion de la mémoire soit réellement bien effectuée. Nous observons quelques petits sauts de frames pendant le jeu. La plupart de ces problèmes auraient pu être résolus avec plus de temps.

##Répartition du travail##

Nous avons collaboré sur gitHub tout le long du projet.

Manon s'est occupé majoritairement des tests unitaires, des collisions, du déplacement des robots et de la physique de la gravité, de l'expérimentation du fonctionnement de la bibliothèque SFML, de la gestion des sprites pour les robots, et de la détection des touches.

Quentin s'est occupé majoritairement des éléments graphiques, de la gestion des menus, de la gestion des tirs, de la création des maps, du readme, de la détection des clics, et de l'affinage des mécaniques de jeu.

Le reste est le fruit d'un travail commun et chacun s'est régulièrement impliqué dans le travail de l'autre.


